{"version":3,"file":"uniqolor.min.js","sources":["../src/index.js"],"sourcesContent":["const SATURATION_BOUND = [0, 100];\nconst LIGHTNESS_BOUND = [0, 100];\n\nconst pad2 = str => `${str.length === 1 ? '0' : ''}${str}`;\n\nconst clamp = (num, min, max) => Math.max(Math.min(num, max), min);\n\nconst random = (min, max) => Math.floor(Math.random() * ((max - min) + 1)) + min;\n\nconst randomExclude = (min, max, exclude) => {\n  const r = random(min, max);\n\n  for (let i = 0; i < exclude?.length; i++) {\n    const value = exclude[i];\n\n    if (value?.length === 2 && r >= value[0] && r <= value[1]) {\n      return randomExclude(min, max, exclude);\n    }\n  }\n\n  return r;\n};\n\n/**\n * Generate hashCode\n * @param  {string} str\n * @return {number}\n */\nconst hashCode = str => {\n  const len = str.length;\n  let hash = 0;\n\n  for (let i = 0; i < len; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n};\n\n/**\n* Clamps `num` within the inclusive `range` bounds\n* @param  {number}       num\n* @param  {number|Array} range\n* @return {number}\n*/\nconst boundHashCode = (num, range) => {\n  if (typeof range === 'number') {\n    return range;\n  }\n\n  return (num % Math.abs(range[1] - range[0])) + range[0];\n};\n\n/**\n * Sanitizing the `range`\n * @param  {number|Array} range\n * @param  {Array}        bound\n * @return {number|Array}\n */\nconst sanitizeRange = (range, bound) => {\n  if (typeof range === 'number') {\n    return clamp(Math.abs(range), ...bound);\n  }\n\n  if (range.length === 1 || range[0] === range[1]) {\n    return clamp(Math.abs(range[0]), ...bound);\n  }\n\n  return [\n    Math.abs(clamp(range[0], ...bound)),\n    clamp(Math.abs(range[1]), ...bound),\n  ];\n};\n\n/**\n * @param  {number} p\n * @param  {number} q\n * @param  {number} t\n * @return {number}\n */\nconst hueToRgb = (p, q, t) => {\n  if (t < 0) {\n    t += 1;\n  } else if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + ((q - p) * 6 * t);\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + ((q - p) * ((2 / 3) - t) * 6);\n  }\n\n  return p;\n};\n\n/**\n * Converts an HSL color to RGB\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {Array}\n */\nconst hslToRgb = (h, s, l) => {\n  let r;\n  let g;\n  let b;\n\n  h /= 360;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    // achromatic\n    r = g = b = l;\n  } else {\n    const q = l < 0.5\n      ? l * (1 + s)\n      : (l + s) - (l * s);\n    const p = (2 * l) - q;\n\n    r = hueToRgb(p, q, h + (1 / 3));\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - (1 / 3));\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n};\n\n/**\n * Determines whether the RGB color is light or not\n * http://www.w3.org/TR/AERT#color-contrast\n * @param  {number}  r               Red\n * @param  {number}  g               Green\n * @param  {number}  b               Blue\n * @param  {number}  differencePoint\n * @return {boolean}\n */\nconst rgbIsLight = (r, g, b, differencePoint) => ((r * 299) + (g * 587) + (b * 114)) / 1000 >= differencePoint; // eslint-disable-line max-len\n\n/**\n * Converts an HSL color to string format\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {string}\n */\nconst hslToString = (h, s, l) => `hsl(${h}, ${s}%, ${l}%)`;\n\n/**\n * Converts RGB color to string format\n * @param  {number}  r      Red\n * @param  {number}  g      Green\n * @param  {number}  b      Blue\n * @param  {string}  format Color format\n * @return {string}\n */\nconst rgbFormat = (r, g, b, format) => {\n  switch (format) {\n    case 'rgb':\n      return `rgb(${r}, ${g}, ${b})`;\n    case 'hex':\n    default:\n      return `#${pad2(r.toString(16))}${pad2(g.toString(16))}${pad2(b.toString(16))}`;\n  }\n};\n\n/**\n * Generate unique color from `value`\n * @param  {string|number} value\n * @param  {Object}        [options={}]\n * @param  {string}        [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array}  [options.saturation=[50, 55]]\n *  Determines the color saturation, it can be a number or a range between 0 and 100\n * @param  {number|Array}  [options.lightness=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @param  {number}        [options.differencePoint=130]\n *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n *  in the output, it can be a number between 0 and 255\n * @return {Object}\n * @example\n *\n * ```js\n * uniqolor('Hello world!')\n * // { color: \"#5cc653\", isLight: true }\n *\n * uniqolor('Hello world!', { format: 'rgb' })\n * // { color: \"rgb(92, 198, 83)\", isLight: true }\n *\n * uniqolor('Hello world!', {\n *   saturation: 30,\n *   lightness: [70, 80],\n * })\n * // { color: \"#afd2ac\", isLight: true }\n *\n * uniqolor('Hello world!', {\n *   saturation: 30,\n *   lightness: [70, 80],\n *   differencePoint: 200,\n * })\n * // { color: \"#afd2ac\", isLight: false }\n * ```\n */\nconst uniqolor = (value, {\n  format = 'hex',\n  saturation = [50, 55],\n  lightness = [50, 60],\n  differencePoint = 130,\n} = {}) => {\n  const hash = Math.abs(hashCode(String(value)));\n  const h = boundHashCode(hash, [0, 360]);\n  const s = boundHashCode(hash, sanitizeRange(saturation, SATURATION_BOUND));\n  const l = boundHashCode(hash, sanitizeRange(lightness, LIGHTNESS_BOUND));\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b, differencePoint),\n  };\n};\n\n/**\n * Generate random color\n * @param  {Object}       [options={}]\n * @param  {string}       [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array} [options.saturation=[50, 55]]\n *  Determines the color saturation, it can be a number or a range between 0 and 100\n * @param  {number|Array} [options.lightness=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @param  {number}       [options.differencePoint=130]\n *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n *  in the output, it can be a number between 0 and 255\n * @param  {Array}        [options.excludeHue]\n *  Exclude certain hue ranges. For example to exclude red color range: `[[0, 20], [325, 359]]`\n * @return {Object}\n * @example\n *\n * ```js\n * // Generate random color\n * uniqolor.random()\n * // { color: \"#644cc8\", isLight: false }\n *\n * // Generate a random color with HSL format\n * uniqolor.random({ format: 'hsl' })\n * // { color: \"hsl(89, 55%, 60%)\", isLight: true }\n *\n * // Generate a random color in specific saturation and lightness\n * uniqolor.random({\n *   saturation: 80,\n *   lightness: [70, 80],\n * })\n * // { color: \"#c7b9da\", isLight: true }\n *\n * // Generate a random color but exclude red color range\n * uniqolor.random({\n *   excludeHue: [[0, 20], [325, 359]],\n * })\n * // {color: '#53caab', isLight: true}\n * ```\n */\nuniqolor.random = ({\n  format = 'hex',\n  saturation = [50, 55],\n  lightness = [50, 60],\n  differencePoint = 130,\n  excludeHue,\n} = {}) => {\n  saturation = sanitizeRange(saturation, SATURATION_BOUND);\n  lightness = sanitizeRange(lightness, LIGHTNESS_BOUND);\n\n  const h = excludeHue ? randomExclude(0, 359, excludeHue) : random(0, 359);\n  const s = typeof saturation === 'number'\n    ? saturation\n    : random(...saturation);\n  const l = typeof lightness === 'number'\n    ? lightness\n    : random(...lightness);\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b, differencePoint),\n  };\n};\n\nexport default uniqolor;\n"],"names":["SATURATION_BOUND","LIGHTNESS_BOUND","pad2","str","concat","length","clamp","num","min","max","Math","random","floor","randomExclude","exclude","r","i","value","boundHashCode","range","abs","sanitizeRange","bound","apply","_toConsumableArray","hueToRgb","p","q","t","hslToRgb","h","s","l","g","b","round","rgbIsLight","differencePoint","hslToString","rgbFormat","format","toString","uniqolor","_ref","arguments","undefined","_ref$format","_ref$saturation","saturation","_ref$lightness","lightness","_ref$differencePoint","hash","len","charCodeAt","hashCode","String","_hslToRgb2","_slicedToArray","color","isLight","_ref2","_ref2$format","_ref2$saturation","_ref2$lightness","_ref2$differencePoint","excludeHue","_hslToRgb4"],"mappings":"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"}